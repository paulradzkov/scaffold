/* space.less v0.0.3 | MIT License | github.com/paulradzkov/space.less */

.space-settings() {

    @spaces: 0, 8px, 16px, 24px, 40px, 64px, 104px, 168px;
    @spacealias: -zero, -nano, -micro, -mili, -base, -kilo, -mega, -giga;

    // media breakpoints
    @breakpoints:
        ~"(min-width: 576px)",
        ~"(min-width: 768px)",
        ~"(min-width: 992px)",
        ~"(min-width: 1200px)";

    // names for breakpoint suffixes
    @suffixes: xs, sm, md, lg, xl;
    @suffixes-separator: ~"\:";  // will render css as .space-auto\:xs

    // IMPORTANT: suffixes count should be bigger than breakpoints count by 1
    // suffixes-count = breakpoints-count + 1

    @cust-prop: true; // enable css custom properties
}

& {

    .space-settings();

    @i: length(@spaces);      // how many steps we have
    @j: length(@spacealias);  // how many aliases we have
    @n: length(@breakpoints); // how many breakpoints we have
    @m: length(@suffixes);    // how many suffixes we have
    @first-suffix: extract(@suffixes, 1); // first breakpoint suffix

    @none:;
    @top: -top;
    @bottom: -bottom;
    @left: -left;
    @right: -right;
    @v: -v;
    @h: -h;
    @tall: -tall;
    @wide: -wide;

    // Basic looping in LESS
    .loop-space-steps(@type, @suff, @prop, @sign, @index: @i) when (@index > 0) and ( @i = @j) {
        .loop-space-steps(@type, @suff, @prop, @sign, (@index - 1)); // next iteration
        @current-alias: extract(@spacealias, @index);
        @current-value: extract(@spaces, @index);
        @current-pre-alias: extract(@spacealias, (@index - 1));
        @current-pre-value: extract(@spaces, (@index - 1));

        & when (@cust-prop = true) {

            // we don't want .space-minus-zero:xs { margin: 0;}
            & when not ((@type = minus) and (@index = 1)) {
                & when (@sign = 1) {
                    .space-@{type}@{current-alias}@{suff-sep}@{suff}          { && { @{prop}:        ~"var(--space@{current-alias})"; } }
                    .space-@{type}@{top}@{current-alias}@{suff-sep}@{suff}    { && { @{prop}-top:    ~"var(--space@{current-alias})"; } }
                    .space-@{type}@{bottom}@{current-alias}@{suff-sep}@{suff} { && { @{prop}-bottom: ~"var(--space@{current-alias})"; } }
                    .space-@{type}@{left}@{current-alias}@{suff-sep}@{suff}   { && { @{prop}-left:   ~"var(--space@{current-alias})"; } }
                    .space-@{type}@{right}@{current-alias}@{suff-sep}@{suff}  { && { @{prop}-right:  ~"var(--space@{current-alias})"; } }
                    .space-@{type}@{v}@{current-alias}@{suff-sep}@{suff}      { && { @{prop}-top:    ~"var(--space@{current-alias})"; @{prop}-bottom: ~"var(--space@{current-alias})"; } }
                    .space-@{type}@{h}@{current-alias}@{suff-sep}@{suff}      { && { @{prop}-left:   ~"var(--space@{current-alias})"; @{prop}-right:  ~"var(--space@{current-alias})"; } }

                    // we don't want tall and wide classes on zero and nano steps
                    & when (@index > 2) {
                        .space-@{type}@{tall}@{current-alias}@{suff-sep}@{suff} { && { @{prop}: ~"var(--space@{current-alias})" ~"var(--space@{current-pre-alias})"; } }
                        .space-@{type}@{wide}@{current-alias}@{suff-sep}@{suff} { && { @{prop}: ~"var(--space@{current-pre-alias})" ~"var(--space@{current-alias})"; } }
                    }
                }
                & when (@sign = -1) {
                    .space-@{type}@{current-alias}@{suff-sep}@{suff}          { && { @{prop}:        ~"var(--space-minus@{current-alias})"; } }
                    .space-@{type}@{top}@{current-alias}@{suff-sep}@{suff}    { && { @{prop}-top:    ~"var(--space-minus@{current-alias})"; } }
                    .space-@{type}@{bottom}@{current-alias}@{suff-sep}@{suff} { && { @{prop}-bottom: ~"var(--space-minus@{current-alias})"; } }
                    .space-@{type}@{left}@{current-alias}@{suff-sep}@{suff}   { && { @{prop}-left:   ~"var(--space-minus@{current-alias})"; } }
                    .space-@{type}@{right}@{current-alias}@{suff-sep}@{suff}  { && { @{prop}-right:  ~"var(--space-minus@{current-alias})"; } }
                    .space-@{type}@{v}@{current-alias}@{suff-sep}@{suff}      { && { @{prop}-top:    ~"var(--space-minus@{current-alias})"; @{prop}-bottom: ~"var(--space-minus@{current-alias})"; } }
                    .space-@{type}@{h}@{current-alias}@{suff-sep}@{suff}      { && { @{prop}-left:   ~"var(--space-minus@{current-alias})"; @{prop}-right:  ~"var(--space-minus@{current-alias})"; } }

                    // we don't want tall and wide classes on zero and nano steps
                    & when (@index > 2) {
                        .space-@{type}@{tall}@{current-alias}@{suff-sep}@{suff} { && { @{prop}: ~"var(--space-minus@{current-alias})" ~"var(--space-minus@{current-pre-alias})"; } }
                        .space-@{type}@{wide}@{current-alias}@{suff-sep}@{suff} { && { @{prop}: ~"var(--space-minus@{current-pre-alias})" ~"var(--space-minus@{current-alias})"; } }
                    }
                }
            }
        }

        & when (@cust-prop = false) {

            // we don't want .space-minus-zero:xs { margin: 0;}
            & when not ((@type = minus) and (@index = 1)) {
                .space-@{type}@{current-alias}@{suff-sep}@{suff}          { && { @{prop}:        (@current-value * @sign); } }
                .space-@{type}@{top}@{current-alias}@{suff-sep}@{suff}    { && { @{prop}-top:    (@current-value * @sign); } }
                .space-@{type}@{bottom}@{current-alias}@{suff-sep}@{suff} { && { @{prop}-bottom: (@current-value * @sign); } }
                .space-@{type}@{left}@{current-alias}@{suff-sep}@{suff}   { && { @{prop}-left:   (@current-value * @sign); } }
                .space-@{type}@{right}@{current-alias}@{suff-sep}@{suff}  { && { @{prop}-right:  (@current-value * @sign); } }
                .space-@{type}@{v}@{current-alias}@{suff-sep}@{suff}      { && { @{prop}-top:    (@current-value * @sign); @{prop}-bottom: (@current-value * @sign); } }
                .space-@{type}@{h}@{current-alias}@{suff-sep}@{suff}      { && { @{prop}-left:   (@current-value * @sign); @{prop}-right:  (@current-value * @sign); } }

                // we don't want tall and wide classes on zero and nano steps
                & when (@index > 2) {
                    .space-@{type}@{tall}@{current-alias}@{suff-sep}@{suff} { && { @{prop}: (@current-value * @sign) (@current-pre-value * @sign); } }
                    .space-@{type}@{wide}@{current-alias}@{suff-sep}@{suff} { && { @{prop}: (@current-pre-value * @sign) (@current-value * @sign); } }
                }
            }
        }
    }

    .render-cust-props(@index: @i) when (@cust-prop = true) and (@index > 0) and ( @i = @j) {
        .render-cust-props((@index - 1));
        @current-alias: extract(@spacealias, @index);
        @current-value: extract(@spaces, @index);

        --space@{current-alias}: @current-value;
        & when (@current-value > 0) {
            --space-minus@{current-alias}: (@current-value * -1);
        }
    }

    // Render module with breakpoint suffix
    .space(@suff; @suff-sep: @suffixes-separator) {

        .space-auto@{suff-sep}@{suff}          { && { margin:        auto; } }
        .space-auto@{top}@{suff-sep}@{suff}    { && { margin-top:    auto; } }
        .space-auto@{bottom}@{suff-sep}@{suff} { && { margin-bottom: auto; } }
        .space-auto@{left}@{suff-sep}@{suff}   { && { margin-left:   auto; } }
        .space-auto@{right}@{suff-sep}@{suff}  { && { margin-right:  auto; } }
        .space-auto@{v}@{suff-sep}@{suff}      { && { margin-top: auto; margin-bottom: auto; } }
        .space-auto@{h}@{suff-sep}@{suff}      { && { margin-left: auto; margin-right: auto; } }

        .loop-space-steps(in, @suff, padding, 1, @i);
        .loop-space-steps(out, @suff, margin, 1, @i);
        .loop-space-steps(minus, @suff, margin, -1, @i);
    }

    // Create breakpoints
    .responsive(@index: @m) when (@index > 1) and (@m = (@n + 1)) {
        .responsive((@index - 1)); // next iteration
        @current-class: extract(@suffixes, @index);
        @current-breakpoint: extract(@breakpoints, (@index - 1));

        @media @current-breakpoint {
            .space(@current-class);
        }
    }

    // Render css custom properties
    :root when (@cust-prop = true) {
        .render-cust-props();
    }

    // Render default state before first breakpoint
    .space(@none, @suff-sep:@none);
    .space(@first-suffix);

    // Render mediaqueries with breakpoints
    .responsive();
}
